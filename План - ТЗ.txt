Отлично! Похоже, теперь картина практически полная. Ниже соберу все уточнённые требования в единый список, чтобы убедиться, что у нас есть чёткое представление о проекте.

---

## **ИТОГОВОЕ ТЗ ПО ПРОЕКТУ**

### 1. Общие сведения

- **Приложение**: веб-система (frontend + backend) для тестирования (тренировки) пользователей по различным предметам в рамках факультетов.
- **Стек**: Python + SQLite. (Опционально — с учётом дальнейшей возможности перехода на PostgreSQL, лучше использовать ORM, например, SQLAlchemy, но это не жёсткое требование.)
- **Роли**:
  1. **Админ (Admin)**
     - Единственный в системе.
     - Может всё: управлять факультетами, предметами, пользователями, загружать вопросы, настраивать дизайн (лого, цвета), просматривать статистику, завершать сессии пользователей и т.д.
  2. **Менеджер (Manager)**
     - Может создавать/редактировать пользователей, назначать факультет пользователю.
     - Может видеть общий список пользователей, редактировать их данные (в т.ч. сбрасывать пароль).
     - Может завершать сессии пользователей, видеть время последней активности.
     - Не может управлять факультетами и предметами, загружать тестовые вопросы, настраивать дизайн и т. п.
  3. **Пользователь (User)**
     - Может входить в систему и проходить тесты (в режиме «Тренировка» или «Все вопросы»).
     - Может просматривать свою личную статистику.
     - Не может менять какие-либо настройки системы.

### 2. Регистрация и аутентификация

1. **Создание пользователей**:  
   - Только админ и менеджер могут создать/редактировать/деактивировать пользователя.  
   - Поля при создании: ФИО (или просто «Имя»), почта, пароль (задаётся вручную), роль (пользователь, менеджер), привязка к факультету.  
   - Пароли (рекомендуется) хешируем, но в учебном проекте можно упростить по согласованию.  

2. **Авторизация**:  
   - По логину (e-mail) и паролю.  
   - При входе генерируется некий `session_token`, который хранится у пользователя в cookies/хранилище и в БД.  
   - **Ограничение:** нельзя быть залогиненным одновременно на двух устройствах. Если пользователь заходит на новом устройстве, то предыдущая сессия аннулируется.  
   - Храним также `last_activity` (время последней активности). Менеджер и админ могут просматривать и «закрывать» сессии (принудительно логаутить).

3. **Страница входа**:  
   - Минимальная форма: e-mail + пароль + кнопка «Войти».  
   - Если логин/пароль неверные, сообщаем пользователю.  
   - Функция «восстановить пароль» не нужна, но админ/менеджер может сбросить пароль в админке.  

### 3. Факультеты и предметы

- **Админ** создаёт факультет и прикрепляет к нему несколько предметов.  
- Не предусмотрено, чтобы один предмет относился к разным факультетам. Каждому факультету — свой набор предметов.  
- При создании пользователя менеджер/админ выбирает, к какому факультету он относится. Значит, пользователь видит только те предметы, что закреплены за его факультетом.

### 4. Вопросы и Excel

- **Загрузка вопросов**: только админ.
- Формат Excel:
  1. **Вопрос** (столбец A)
  2. **Правильный ответ** (столбец B)
  3. **Ответ 2** (столбец C)
  4. **Ответ 3** (столбец D)
  5. **Ответ 4** (столбец E)
- Гарантировано: файл «чистый», без пустых ячеек.
- При загрузке сразу сохраняем вопросы в БД, сам файл можно не хранить.
- Количество вопросов в предмете может достигать 250, а может быть и меньше 25.

### 5. Режимы тестирования

#### 5.1. Тренировка

1. **Сценарий**:  
   - Пользователь нажимает «Начать тренировку» (с главной страницы).  
   - Выбирает предмет (из списка, доступного ему по его факультету).  
   - В описании теста указываем, что будет 25 вопросов, 25 минут и т. д.  
   - При старте показываем первый вопрос.  
2. **Логика выдачи**:
   - Нужно «равномерное» покрытие всех вопросов базы. Принцип: брать в первую очередь те вопросы, которые пользователь видел реже всего. Если в предмете меньше 25 вопросов, тогда можно повторять. Если больше 25, стараемся не повторять уже пройденные, пока не «используем» их все.  
   - Если вопросов совсем мало (например, 20), добираем оставшиеся 5 путём повторения каких-либо (самый простой вариант).  
   - При каждом тесте перемешиваем порядок ответов в каждом вопросе (чтобы правильный не был всегда на одном месте).  
3. **Внешний вид**:
   - На странице виден один вопрос, варианты ответов (радио-кнопки, например).  
   - Кнопки «Далее» / «Назад», при переходе сохраняем текущий выбор.  
   - Таймер на экране показывает оставшееся время (25 минут).  
4. **Окончание теста**:
   - Если время истекло — тест завершается автоматически, все непомеченные вопросы считаются неправильными.  
   - Если пользователь вручную нажимает «Завершить» (и подтверждает диалогом), тест завершается.  
   - Если пользователь покинул страницу или закрыл браузер — тест считается несданным, результат = 0 баллов.  
5. **Результат**:
   - Считаем балл как `(правильных / 25) * 100`.  
   - Записываем в БД: время начала, время завершения, результат в %, фактическое количество правильных ответов.  
   - Выводим пользователю общий итог (количество правильных, итоговый %). Без детальных разбивок.

#### 5.2. Все вопросы

1. **Сценарий**:
   - Пользователь переходит в режим «Все вопросы» (для конкретного предмета).  
   - Отображает вопросы **по одному**: «Далее / Назад».  
2. **Ответ**:
   - Как только пользователь выбирает вариант (и подтверждает), показываем тут же, верно или нет. Если верно — надпись «Правильно», если неверно — «Неправильно, правильный ответ: …».  
   - Повторно менять ответ нельзя.  
3. **Статистику ответов** в этом режиме **не** нужно сохранять. Это чисто ознакомительный просмотр.

### 6. Статистика

1. **У пользователя**:
   - На главной странице видит для **каждого предмета**, сколько раз он проходил тренировочный тест, и средний балл. Например:
     - «Математика: 3 прохождения, средний балл 72%»
     - «Физика: 2 прохождения, средний балл 84%»
   - Кнопка «Начать тренировку» (ведёт на выбор предмета).  
2. **У админа/менеджера**:
   - Список всех пользователей (с фильтром/поиском). Для каждого — ФИО, факультет, дата/время последней активности, статус (активен/заблокирован), активна ли сессия сейчас.  
   - Возможность завершить сессию.  
   - При просмотре детальной статистики пользователя — показывать, сколько попыток, какие результаты и т. д.  
   - (Обнуление статистики не требуется.)

### 7. Адаптивный интерфейс и настройки дизайна

- Должен работать на мобильных экранах (меню-гамбургер) и на десктопах.
- **Админ** может загружать PNG-логотипы, менять цветовые схемы (HEX-коды). Должен быть мини-просмотр изменений.  
- Два языка интерфейса: **русский** и **узбекский**. Механизма «динамической локализации» нет — просто жёстко дублируем тексты. Можно дать пользователю переключатель «RU / UZ» (по умолчанию RU).

### 8. Страница «Поддержка»

- Содержит контактную информацию, ссылку на телеграм, кнопку «Позвонить» (tel:ссылка).  
- Без формы обратной связи.

### 9. Прочие детали

- **Сессии**:  
  - При логине генерируем уникальный `session_token`, записываем в таблицу `users` (или `user_sessions`, если хотим хранить историю). Если там уже что-то есть, выкидываем предыдущую сессию.  
  - Храним `last_activity` — обновляем при каждом запросе.  
- **Предупреждения**:  
  - При попытке покинуть страницу теста — «Тест будет прерван, результат не засчитается, вы уверены?»  
  - При завершении теста — «Вы уверены, что хотите завершить тест?»  
- **Объём вопросов**:  
  - До 250 вопросов на предмет. В целом, производительности SQLite хватит.  

---

**Если у тебя нет дополнительных корректировок или уточнений** (например, по алгоритмам, формулировкам в интерфейсе, детальным текстам уведомлений и т. п.), то на этом можно считать, что мы всё обсудили. 

Пожалуйста, дай знать, остались ли ещё моменты, которые следует прояснить. Если всё устраивает, то можно переходить к реализации!